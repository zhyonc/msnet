package opcode

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"strconv"
)

var NotLogCP map[uint16]bool = map[uint16]bool{
	CP_AliveAck: true,
	CP_UserMove: true,
	CP_MobMove:  true,
	CP_NpcMove:  true,
}

var NotLogLP map[uint16]bool = map[uint16]bool{
	LP_AliveReq: true,
	LP_UserMove: true,
	LP_MobMove:  true,
	LP_NpcMove:  true,
}

// Format opcodes for Debugging
func GenOpcodeMap(originPath, targetPath, mapName string) {
	fset := token.NewFileSet()
	f, err := parser.ParseFile(fset, originPath, nil, parser.AllErrors)
	if err != nil {
		panic(err)
	}
	out, err := os.Create(targetPath)
	if err != nil {
		panic(err)
	}
	defer out.Close()
	fmt.Fprintln(out, "// Code generated by opcode_test, DO NOT EDIT.")
	fmt.Fprintln(out, "package opcode")
	fmt.Fprintf(out, "\nvar %s map[uint16]string = map[uint16]string{", mapName)
	fmt.Fprintln(out, "")
	ast.Inspect(f, func(n ast.Node) bool {
		switch v := n.(type) {
		case *ast.ValueSpec:
			for _, name := range v.Names {
				value, err := strconv.ParseInt(v.Values[0].(*ast.BasicLit).Value, 0, 16)
				if err != nil {
					panic(err)
				}
				fmt.Fprintf(out, "\t0x%X: \"%s\",\n", value, name.Name)
			}
		}
		return true
	})
	fmt.Fprintln(out, "}")
}
